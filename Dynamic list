#include <string>
#include <vector>
#include <iostream>
#include <chrono>

using namespace std;

template <typename T>
class DynamicArray {
private:
	int* array;
	int size;
	int capacity;

public: DynamicArray(int cap):size(0), capacity(cap){
	array = new int[capacity];
}

	~DynamicArray(){
		delete[] array;
}

	void addToTheEnd(int element){
		if(size == capacity){
			int* temp = new int[2 * capacity];
			for(int i = 0; i < size; i++){
				temp[i] = array[i];
			}
			delete[] array;
			array = temp;
			capacity *= 2;
		}
		array[size++] = element;
	}

	void displayForward() {
		for(int i =0; i<size; i++)
		{
			cout << array[i]  <<endl;
		}
		cout << "Size: " << size << endl << "Capacity: " << capacity << endl; 
	}

	void initializer(int amountOfElements) {
		for (int i = 0; i < size; i++) {
			int randomInt = rand() % 10000;
			addToTheEnd(randomInt);
		}
	}

	void elementsAdder(int amountOfElements) { // A
		for (int i = 0; i < amountOfElements; i++) {
			int randomInt = rand() % 10000;
			addToTheEnd(randomInt);
		}
	}

	string toString(int range) {
		string res = "Size: " + to_string(size) + "\n";
		res = res + "Capacity" + to_string(capacity) + "\n";
		res = res + "Elements: " + "\n";
		int count = 0;

		for (int i = 0; i < range; i++) {
			res +=  to_string(array[i]) + "\n";
		}
		/*for (int i = range - 1; i >= 0; i--) {
			res += to_string(array[i]) + "\n";
		}*/


		for (int i = 0; i < 94; i++) {
			cout << "-";
		}
		cout << endl;
		cout << "Memory address: " << array << endl;

		return res;
	}

	void getById(int id) { // B
		try {
			if (id < 0) {
				throw invalid_argument("id cannot be less than 0" );
			}
			if (id > size) {
				throw invalid_argument(" id out of bounds ");
			}
			cout <<"Here it is: " << array[id+1] << endl;
		}
		catch (const invalid_argument& e) {
			cout << "something went wrong :( " << e.what() << endl;
		}

	}

	void updateById(int id, T field){ // C
		id++;
		try {
			if (id < 0) {
				throw invalid_argument("id cannot be less than 0");
			}
			if (id > size) {
				throw invalid_argument(" id out of bounds ");
			}
			array[id] = field;
		}
		catch (const invalid_argument& e) {
			cout << "something went wrong :( " << e.what() << endl;
		}
	
	}

	void deleteAll() { // D
		delete[] array;
		size = 0;
		capacity = 0;
		array = new T[capacity];
	}

	void bubbleSort(bool ascending = true) {
		for (int i = 0; i < size - 1; i++) {
			for (int j = 0; j < size - i - 1; j++) {
				if ((ascending && array[j] > array[j + 1]) ||
					(!ascending && array[j] < array[j + 1])) {
					T temp = array[j];
					array[j] = array[j + 1];
					array[j + 1] = temp;
				}
			}
		}
	}

	/*void stopWatchStart() {
		auto start = chrono::high_resolution_clock::now();
	}
	
	void stopWatchEnd() {
		auto end = chrono::high_resolution_clock::now();
		auto timeElapsed = end - start;
		auto convertToMs = chrono::duration_cast<chrono::milliseconds>(timeElapsed).count();
		cout << "TIME: " << convertToMs << endl;
	}*/
};

int main(){
	DynamicArray<int> coolArray(1);

	auto start = chrono::high_resolution_clock::now();
	coolArray.initializer(14);
	coolArray.elementsAdder(10000);
	cout << coolArray.toString(10);
	auto end = chrono::high_resolution_clock::now();
	auto timeElapsed = end - start;
	auto convertToMs = chrono::duration_cast<chrono::milliseconds>(timeElapsed).count();
	cout << "TIME: " << convertToMs << endl;
	coolArray.getById(3);
	coolArray.updateById(4, 000000);
	cout << coolArray.toString(10);
	//coolArray.deleteAll();
	//cout << coolArray.toString(10);

	coolArray.bubbleSort();
	cout << coolArray.toString(10);

	coolArray.bubbleSort(false);
	cout << coolArray.toString(10);
	
	//coolArray.displayForward();

}


